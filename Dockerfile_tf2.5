ARG CUDA_DOCKER_VERSION=11.2.2-devel-ubuntu18.04
FROM nvidia/cuda:${CUDA_DOCKER_VERSION}

# Arguments for the build. CUDA_DOCKER_VERSION needs to be repeated because
# the first usage only applies to the FROM tag.
# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully
# ARG CUDA_DOCKER_VERSION=11.2.2-devel-ubuntu18.04
ARG TENSORFLOW_VERSION=2.5.0
ARG PYTORCH_VERSION=1.8.1+cu111
ARG PYTORCH_LIGHTNING_VERSION=1.2.9
ARG TORCHVISION_VERSION=0.9.1+cu111
ARG CUDNN_VERSION=8.1.1.33-1+cuda11.2
ARG NCCL_VERSION=2.8.4-1+cuda11.2
ENV TF_FORCE_GPU_ALLOW_GROWTH=true

# Python 3.7 is supported by Ubuntu Bionic out of the box
ARG PYTHON_VERSION=3.7

# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

RUN bash -c "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub"

RUN apt update

RUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
        build-essential \
        cmake \
        g++-7 \
        git \
        curl \
        vim \
        wget \
        ca-certificates \
        libcudnn8=${CUDNN_VERSION} \
        libnccl2=2.8.4-1+cuda11.2 \
        libnccl-dev=2.8.4-1+cuda11.2 \
        libjpeg-dev \
        libpng-dev \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-dev \
        python${PYTHON_VERSION}-distutils \
        librdmacm1 \
        libibverbs1 \
        ibverbs-providers \
        openjdk-8-jdk-headless \
        openssh-client \
        openssh-server \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Open MPI
#RUN wget --progress=dot:mega -O /tmp/openmpi-3.0.0-bin.tar.gz https://github.com/horovod/horovod/files/1596799/openmpi-3.0.0-bin.tar.gz && \
#    cd /usr/local && \
#    tar -zxf /tmp/openmpi-3.0.0-bin.tar.gz && \
#    ldconfig && \
#    mpirun --version

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.0.tar.gz && \
    tar zxf openmpi-4.0.0.tar.gz && \
    cd openmpi-4.0.0 && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi
    
# Allow OpenSSH to talk to containers without asking for confirmation
RUN mkdir -p /var/run/sshd
RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

RUN ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

# Install PyTorch, TensorFlow, Keras and MXNet
RUN pip install --no-cache-dir \
    torch==${PYTORCH_VERSION} \
    torchvision==${TORCHVISION_VERSION} \
    -f https://download.pytorch.org/whl/${PYTORCH_VERSION/*+/}/torch_stable.html
RUN pip install --no-cache-dir pytorch_lightning==${PYTORCH_LIGHTNING_VERSION}

RUN pip install --no-cache-dir future typing packaging
RUN pip install --no-cache-dir \
    tensorflow==${TENSORFLOW_VERSION} \
    keras \
    h5py

RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
      bash -c "HOROVOD_GPU_OPERATIONS=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 pip install --no-cache-dir -v horovod==v0.23.0" && \
      horovodrun --check-build && \
      ldconfig

RUN dpkg --add-architecture i386
RUN apt-get update
RUN apt install -y libsm6 libxext6 libxrender-dev libfontconfig1 libglib2.0-0

# Check all frameworks are working correctly. Use CUDA stubs to ensure CUDA libs can be found correctly
# when running on CPU machine
# RUN ldd /home/ubuntu/horovod/local/lib/python2.7/site-packages/horovod/common/mpi_lib.so
RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    python -c "import horovod.tensorflow as hvd; hvd.init()" && \
    python -c "import horovod.torch as hvd; hvd.init()" && \
    ldconfig

# Python packages
RUN pip install \
    numpy \
    tqdm \
    opencv-python==3.4.2.17 \
    pandas \
    tensorflow_addons==0.13.0 \
    scikit-learn \
    matplotlib \
    tensorflow_probability==0.11.0

# Hot fix
RUN bash -c "sed -i 's/if JAX_MODE/if True/' /usr/local/lib/python3.7/dist-packages/tensorflow_probability/python/bijectors/sigmoid.py"

RUN pip install ipython \
    jupyterlab \
    ipywidgets \
    seaborn

RUN pip install keras_applications